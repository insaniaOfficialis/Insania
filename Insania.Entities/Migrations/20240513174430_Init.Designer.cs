// <auto-generated />
using System;
using Insania.Entities.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Insania.Entities.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20240513174430_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.4")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Administrator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ChapterId")
                        .HasColumnType("bigint")
                        .HasColumnName("chapter_id")
                        .HasComment("Ссылка на капитул");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<int>("HonorPoints")
                        .HasColumnType("integer")
                        .HasColumnName("honor_points")
                        .HasComment("Баллы почёта");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<long?>("MentorId")
                        .HasColumnType("bigint")
                        .HasColumnName("mentor_id")
                        .HasComment("Ссылка на наставника");

                    b.Property<long>("PostId")
                        .HasColumnType("bigint")
                        .HasColumnName("post_id")
                        .HasComment("Ссылка на должность");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint")
                        .HasColumnName("rank_id")
                        .HasComment("Ссылка на звание");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasComment("Ссылка на пользователя");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("ChapterId");

                    b.HasIndex("MentorId");

                    b.HasIndex("PostId");

                    b.HasIndex("RankId");

                    b.HasIndex("UserId");

                    b.ToTable("re_administrators", t =>
                        {
                            t.HasComment("Администраторы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Chapter", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id")
                        .HasComment("Ссылка на страну");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsParamount")
                        .HasColumnType("boolean")
                        .HasColumnName("is_paramount")
                        .HasComment("Признак верховности");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("re_chapters", t =>
                        {
                            t.HasComment("Капитулы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Post", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("ScopeActivity")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("scope_activity")
                        .HasComment("Сфера деятельности");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_posts", t =>
                        {
                            t.HasComment("Должности");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<double>("CoefficientAccrualHonorPoints")
                        .HasColumnType("double precision")
                        .HasColumnName("coefficient_accrual_honor_points")
                        .HasComment("Коэффициент начисления баллов почёта");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_ranks", t =>
                        {
                            t.HasComment("Звания");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Appearance.EyesColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("Rgb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rgb")
                        .HasComment("Rgb-модель цвета");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_eyes_colors", t =>
                        {
                            t.HasComment("Цвета глаз");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Appearance.HairsColor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("Rgb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("rgb")
                        .HasComment("Rgb-модель цвета");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_hairs_colors", t =>
                        {
                            t.HasComment("Цвета волос");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Appearance.TypeBody", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_bodies", t =>
                        {
                            t.HasComment("Типы телосложений");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Appearance.TypeFace", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_faces", t =>
                        {
                            t.HasComment("Типы лиц");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Biology.Nation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("LanguageForNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_for_personal_names")
                        .HasComment("Язык для названий");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("race_id")
                        .HasComment("Ссылка на расу");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("RaceId");

                    b.ToTable("dir_nations", t =>
                        {
                            t.HasComment("Нации");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Biology.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_races", t =>
                        {
                            t.HasComment("Расы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Chronology.Month", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint")
                        .HasColumnName("season_id")
                        .HasComment("Ссылка на сезон");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number")
                        .HasComment("Порядковый номер");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("SeasonId");

                    b.ToTable("dir_months", t =>
                        {
                            t.HasComment("Месяцы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Chronology.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<int>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number")
                        .HasComment("Порядковый номер");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_seasons", t =>
                        {
                            t.HasComment("Сезоны");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Files.File", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Extention")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("extention")
                        .HasComment("Расширение");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Ссылка на тип");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("re_files", t =>
                        {
                            t.HasComment("Файлы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Files.FileHero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<long>("FileId")
                        .HasColumnType("bigint")
                        .HasColumnName("file_id")
                        .HasComment("Ссылка на файл");

                    b.Property<long>("HeroId")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_id")
                        .HasComment("Ссылка на персонажа");

                    b.Property<int?>("SequenceNumber")
                        .HasColumnType("integer")
                        .HasColumnName("sequence_number")
                        .HasComment("Порядковый номер");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("FileId");

                    b.HasIndex("HeroId");

                    b.ToTable("un_files_heroes", t =>
                        {
                            t.HasComment("Файлы персонажей");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Files.TypeFile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("path")
                        .HasComment("Путь");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_files", t =>
                        {
                            t.HasComment("Типы файла");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Geography.GeographicalObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("Ссылка на родителя");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Ссылка на тип");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("re_geographical_objects", t =>
                        {
                            t.HasComment("Географические объекты");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Geography.TypeGeographicalObject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_geographical_objects", t =>
                        {
                            t.HasComment("Типы географического объекта");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.BiographyHero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("CycleBegin")
                        .HasColumnType("integer")
                        .HasColumnName("cycle_begin")
                        .HasComment("Цикл начала");

                    b.Property<int?>("CycleEnd")
                        .HasColumnType("integer")
                        .HasColumnName("cycle_end")
                        .HasComment("Цикл окончания");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<int>("DayBegin")
                        .HasColumnType("integer")
                        .HasColumnName("day_begin")
                        .HasComment("День начала");

                    b.Property<int?>("DayEnd")
                        .HasColumnType("integer")
                        .HasColumnName("day_end")
                        .HasComment("День окончания");

                    b.Property<long>("HeroId")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_id")
                        .HasComment("Ссылка на персонажа");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<long>("MonthBeginId")
                        .HasColumnType("bigint")
                        .HasColumnName("month_begin_id")
                        .HasComment("Ссылка на месяц начала");

                    b.Property<long?>("MonthEndId")
                        .HasColumnType("bigint")
                        .HasColumnName("month_end_id")
                        .HasComment("Ссылка на месяц окончания");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("text")
                        .HasComment("Текст");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("HeroId");

                    b.HasIndex("MonthBeginId");

                    b.HasIndex("MonthEndId");

                    b.ToTable("re_biographies_heroes", t =>
                        {
                            t.HasComment("Биографии персонажей");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.BiographyRequestHeroRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("BiographyId")
                        .HasColumnType("bigint")
                        .HasColumnName("biography_id")
                        .HasComment("Ссылка на персонажа");

                    b.Property<string>("CommentOnDateBegin")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_date_begin")
                        .HasComment("Комментарий к дате начала");

                    b.Property<string>("CommentOnDateEnd")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_date_end")
                        .HasComment("Комментарий к дате окончания");

                    b.Property<string>("CommentOnText")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_text")
                        .HasComment("Комментарий к тексту");

                    b.Property<bool?>("DateBeginDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("date_begin_decision")
                        .HasComment("Решение по дате начала");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<bool?>("DateEndDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("date_end_decision")
                        .HasComment("Решение по дате окончания");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<long>("RequestId")
                        .HasColumnType("bigint")
                        .HasColumnName("request_id")
                        .HasComment("Ссылка на заявку");

                    b.Property<bool?>("TextDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("text_decision")
                        .HasComment("Решение по тексту");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("BiographyId");

                    b.HasIndex("RequestId");

                    b.ToTable("re_biographies_requests_heroes_registration", t =>
                        {
                            t.HasComment("Биографии заявок на регистрацию персонажей");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.Hero", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("BirthCycle")
                        .HasColumnType("integer")
                        .HasColumnName("birth_cycle")
                        .HasComment("Цикл рождения");

                    b.Property<int>("BirthDay")
                        .HasColumnType("integer")
                        .HasColumnName("birth_day")
                        .HasComment("День рождения");

                    b.Property<long>("BirthMonthId")
                        .HasColumnType("bigint")
                        .HasColumnName("birth_month_id")
                        .HasComment("Ссылка на месяц рождения");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<long>("EyesColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("eye_color_id")
                        .HasComment("Ссылка на цвет глаз");

                    b.Property<string>("FamilyName")
                        .HasColumnType("text")
                        .HasColumnName("family_name")
                        .HasComment("Имя семьи");

                    b.Property<DateTime?>("FreezingTo")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("freezing_to")
                        .HasComment("Заморозка да");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean")
                        .HasComment("Пол (истина - мужской/ложь - женский)");

                    b.Property<long>("HairColorId")
                        .HasColumnType("bigint")
                        .HasColumnName("hair_color_id")
                        .HasComment("Ссылка на цвет волос");

                    b.Property<long>("HairsColorId")
                        .HasColumnType("bigint");

                    b.Property<int>("Height")
                        .HasColumnType("integer")
                        .HasColumnName("height")
                        .HasComment("Рост");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean")
                        .HasColumnName("is_active")
                        .HasComment("Признак активности");

                    b.Property<bool>("IsCurrent")
                        .HasColumnType("boolean")
                        .HasColumnName("is_current")
                        .HasComment("Признак текущего");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<long>("NationId")
                        .HasColumnType("bigint")
                        .HasColumnName("nation_id")
                        .HasComment("Ссылка на нацию");

                    b.Property<string>("PersonalName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("personal_name")
                        .HasComment("Личное имя");

                    b.Property<long>("PlayerId")
                        .HasColumnType("bigint")
                        .HasColumnName("player_id")
                        .HasComment("Ссылка на игрока");

                    b.Property<string>("PrefixName")
                        .HasColumnType("text")
                        .HasColumnName("prefix_name")
                        .HasComment("Префикс имени");

                    b.Property<long>("TypeBodyId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_body_id")
                        .HasComment("Ссылка на тип телосложения");

                    b.Property<long>("TypeFaceId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_face_id")
                        .HasComment("Ссылка на тип лица");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.Property<int>("Weight")
                        .HasColumnType("integer")
                        .HasColumnName("weight")
                        .HasComment("Вес");

                    b.HasKey("Id");

                    b.HasIndex("BirthMonthId");

                    b.HasIndex("EyesColorId");

                    b.HasIndex("HairsColorId");

                    b.HasIndex("NationId");

                    b.HasIndex("PlayerId");

                    b.HasIndex("TypeBodyId");

                    b.HasIndex("TypeFaceId");

                    b.ToTable("re_heroes", t =>
                        {
                            t.HasComment("Персонажи");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.RequestHeroRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("AdministratorId")
                        .HasColumnType("bigint")
                        .HasColumnName("administrator_id")
                        .HasComment("Ссылка на ответственного администратора");

                    b.Property<bool?>("BirthDateDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("birth_date_decision")
                        .HasComment("Решение по дате рождения");

                    b.Property<string>("CommentOnBirthDate")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_birth_date")
                        .HasComment("Комментарий к дате рождения");

                    b.Property<string>("CommentOnEyesColor")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_eye_color")
                        .HasComment("Комментарий к цвету глаз");

                    b.Property<string>("CommentOnFamilyName")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_family_name")
                        .HasComment("Комментарий к имени семьи");

                    b.Property<string>("CommentOnHairColor")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_hair_color")
                        .HasComment("Комментарий к цвету волос");

                    b.Property<string>("CommentOnHeight")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_height")
                        .HasComment("Комментарий к росту");

                    b.Property<string>("CommentOnImage")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_image")
                        .HasComment("Комментарий к изображению");

                    b.Property<string>("CommentOnLocation")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_location")
                        .HasComment("Комментарий к местоположению");

                    b.Property<string>("CommentOnNation")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_nation")
                        .HasComment("Комментарий к нации");

                    b.Property<string>("CommentOnPersonalName")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_personal_name")
                        .HasComment("Комментарий к личному имени");

                    b.Property<string>("CommentOnRace")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_race")
                        .HasComment("Комментарий к расе");

                    b.Property<string>("CommentOnTypeBody")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_type_body")
                        .HasComment("Комментарий к типу телосложения");

                    b.Property<string>("CommentOnTypeFace")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_type_face")
                        .HasComment("Комментарий к типу лица");

                    b.Property<string>("CommentOnWeight")
                        .HasColumnType("text")
                        .HasColumnName("comment_on_weight")
                        .HasComment("Комментарий к весу");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool?>("EyesColorDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("eye_color_decision")
                        .HasComment("Решение по цвету глаз");

                    b.Property<bool?>("FamilyNameDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("family_name_decision")
                        .HasComment("Решение по имени семьи");

                    b.Property<bool?>("HairColorDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("hair_color_decision")
                        .HasComment("Решение по цвету волос");

                    b.Property<bool?>("HeightDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("height_decision")
                        .HasComment("Решение по росту");

                    b.Property<long>("HeroId")
                        .HasColumnType("bigint")
                        .HasColumnName("hero_id")
                        .HasComment("Ссылка на персонажа");

                    b.Property<bool?>("ImageDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("image_decision")
                        .HasComment("Решение по изображению");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<bool?>("LocationDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("location_decision")
                        .HasComment("Решение по местоположению");

                    b.Property<bool?>("NationDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("nation_decision")
                        .HasComment("Решение по нации");

                    b.Property<bool?>("PersonalNameDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("personal_name_decision")
                        .HasComment("Решение по личному имени");

                    b.Property<bool?>("RaceDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("race_decision")
                        .HasComment("Решение по расе");

                    b.Property<long>("StatusId")
                        .HasColumnType("bigint")
                        .HasColumnName("status_id")
                        .HasComment("Ссылка на статус");

                    b.Property<bool?>("TypeBodyDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("type_body_decision")
                        .HasComment("Решение по типу телосложения");

                    b.Property<bool?>("TypeFaceDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("type_face_decision")
                        .HasComment("Решение по типу лица");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.Property<bool?>("WeightDecision")
                        .HasColumnType("boolean")
                        .HasColumnName("weight_decision")
                        .HasComment("Решение по весу");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("HeroId");

                    b.HasIndex("StatusId");

                    b.ToTable("re_requests_heroes_registration", t =>
                        {
                            t.HasComment("Заявки на регистрацию персонажей");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.StatusRequestHeroRegistration", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("PreviousId")
                        .HasColumnType("bigint")
                        .HasColumnName("previous_id")
                        .HasComment("Ссылка на предыдущий статус");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("PreviousId");

                    b.ToTable("dir_statuses_requests_heroes_registration", t =>
                        {
                            t.HasComment("Статусы заявок на регистрацию персонажей");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Players.Player", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<int>("LoyaltyPoints")
                        .HasColumnType("integer")
                        .HasColumnName("loyalty_points")
                        .HasComment("Баллы верности");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint")
                        .HasColumnName("user_id")
                        .HasComment("Ссылка на пользователя");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("re_players", t =>
                        {
                            t.HasComment("Игроки");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Area", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint")
                        .HasColumnName("country_id")
                        .HasComment("Ссылка на страну");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<long>("FractionId")
                        .HasColumnType("bigint")
                        .HasColumnName("fraction_id")
                        .HasComment("Ссылка на фракцию");

                    b.Property<long>("GeographicalObjectId")
                        .HasColumnType("bigint")
                        .HasColumnName("geographical_object_id")
                        .HasComment("Ссылка на географический объект");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("NumberOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_on_map")
                        .HasComment("Номер на карте");

                    b.Property<long>("OwnershipId")
                        .HasColumnType("bigint")
                        .HasColumnName("ownership_id")
                        .HasComment("Ссылка на владение");

                    b.Property<int>("PixelSize")
                        .HasColumnType("integer")
                        .HasColumnName("pixel_size")
                        .HasComment("Размер в пикселях");

                    b.Property<long>("RegionId")
                        .HasColumnType("bigint")
                        .HasColumnName("region_id")
                        .HasComment("Ссылка на регион");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("FractionId");

                    b.HasIndex("GeographicalObjectId");

                    b.HasIndex("OwnershipId");

                    b.HasIndex("RegionId");

                    b.ToTable("re_areas", t =>
                        {
                            t.HasComment("Области");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("LanguageForNames")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("language_for_personal_names")
                        .HasComment("Язык для названий");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("NumberOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_on_map")
                        .HasComment("Номер на карте");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id")
                        .HasComment("Ссылка на организацию");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.ToTable("re_countries", t =>
                        {
                            t.HasComment("Страны");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Fraction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Functions")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("functions")
                        .HasComment("Функции");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("re_fractions", t =>
                        {
                            t.HasComment("Фракции");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Organization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("Ссылка на родителя");

                    b.Property<long>("TypeId")
                        .HasColumnType("bigint")
                        .HasColumnName("type_id")
                        .HasComment("Ссылка на тип");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.HasIndex("TypeId");

                    b.ToTable("re_organizations", t =>
                        {
                            t.HasComment("Организации");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Ownership", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("NumberOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_on_map")
                        .HasComment("Номер на карте");

                    b.Property<long>("OrganizationId")
                        .HasColumnType("bigint")
                        .HasColumnName("organization_id")
                        .HasComment("Ссылка на организацию");

                    b.Property<long>("ParentId")
                        .HasColumnType("bigint")
                        .HasColumnName("parent_id")
                        .HasComment("Ссылка на родителя");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.HasIndex("OrganizationId");

                    b.HasIndex("ParentId");

                    b.ToTable("re_ownerships", t =>
                        {
                            t.HasComment("Владения");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Region", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ColorOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("color_on_map")
                        .HasComment("Цвет на карте");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<bool>("IsSystem")
                        .HasColumnType("boolean")
                        .HasColumnName("is_system")
                        .HasComment("Признак системной записи");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("NumberOnMap")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("number_on_map")
                        .HasComment("Номер на карте");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("re_regions", t =>
                        {
                            t.HasComment("Регионы");
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.TypeOrganization", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint")
                        .HasColumnName("id")
                        .HasComment("Первичный ключ таблицы");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("alias")
                        .HasComment("Английское наименование");

                    b.Property<DateTime>("DateCreate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_create")
                        .HasComment("Дата создания");

                    b.Property<DateTime?>("DateDeleted")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_deleted")
                        .HasComment("Дата удаления");

                    b.Property<DateTime>("DateUpdate")
                        .HasColumnType("timestamp with time zone")
                        .HasColumnName("date_update")
                        .HasComment("Дата обновления");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("name")
                        .HasComment("Наименование");

                    b.Property<string>("UserCreate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_create")
                        .HasComment("Пользователь, создавший");

                    b.Property<string>("UserUpdate")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("user_update")
                        .HasComment("Пользователь, обновивший");

                    b.HasKey("Id");

                    b.ToTable("dir_types_organizations", t =>
                        {
                            t.HasComment("Типы организаций");
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sys_roles", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityRole<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<long>", b =>
                {
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.ToTable("RoleClaims", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser<long>", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .HasColumnType("text");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasMaxLength(21)
                        .HasColumnType("character varying(21)");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedUserName")
                        .HasColumnType("text");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("sys_users", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser<long>");

                    b.UseTphMappingStrategy();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<long>", b =>
                {
                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<int>("Id")
                        .HasColumnType("integer");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserClaims", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.ToTable("UserLogins", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<long>", b =>
                {
                    b.Property<long>("RoleId")
                        .HasColumnType("bigint");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.HasKey("RoleId", "UserId");

                    b.ToTable("sys_users_roles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<long>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<long>("UserId")
                        .HasColumnType("bigint");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.ToTable("UserTokens", t =>
                        {
                            t.ExcludeFromMigrations();
                        });
                });

            modelBuilder.Entity("Insania.Entities.Models.System.Role", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityRole<long>");

                    b.ToTable("sys_roles", t =>
                        {
                            t.HasComment("Роли");
                        });

                    b.HasDiscriminator().HasValue("Role");
                });

            modelBuilder.Entity("Insania.Entities.Models.Users.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser<long>");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Имя");

                    b.Property<bool>("Gender")
                        .HasColumnType("boolean")
                        .HasComment("Пол (истина - мужской/ложь - женский)");

                    b.Property<bool>("IsBlocked")
                        .HasColumnType("boolean")
                        .HasComment("Признак заблокированного пользователя");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Фамилия");

                    b.Property<string>("LinkVK")
                        .HasColumnType("text")
                        .HasComment("Ссылка в вк");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasComment("Отчество");

                    b.ToTable("sys_users", t =>
                        {
                            t.HasComment("Пользователи");
                        });

                    b.HasDiscriminator().HasValue("User");
                });

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Administrator", b =>
                {
                    b.HasOne("Insania.Entities.Models.Administrators.Chapter", "Chapter")
                        .WithMany()
                        .HasForeignKey("ChapterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Administrators.Administrator", "Mentor")
                        .WithMany()
                        .HasForeignKey("MentorId");

                    b.HasOne("Insania.Entities.Models.Administrators.Post", "Post")
                        .WithMany()
                        .HasForeignKey("PostId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Administrators.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Chapter");

                    b.Navigation("Mentor");

                    b.Navigation("Post");

                    b.Navigation("Rank");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insania.Entities.Models.Administrators.Chapter", b =>
                {
                    b.HasOne("Insania.Entities.Models.Politics.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("Insania.Entities.Models.Biology.Nation", b =>
                {
                    b.HasOne("Insania.Entities.Models.Biology.Race", "Race")
                        .WithMany()
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Race");
                });

            modelBuilder.Entity("Insania.Entities.Models.Chronology.Month", b =>
                {
                    b.HasOne("Insania.Entities.Models.Chronology.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Season");
                });

            modelBuilder.Entity("Insania.Entities.Models.Files.File", b =>
                {
                    b.HasOne("Insania.Entities.Models.Files.TypeFile", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Insania.Entities.Models.Files.FileHero", b =>
                {
                    b.HasOne("Insania.Entities.Models.Files.File", "File")
                        .WithMany()
                        .HasForeignKey("FileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("File");

                    b.Navigation("Hero");
                });

            modelBuilder.Entity("Insania.Entities.Models.Geography.GeographicalObject", b =>
                {
                    b.HasOne("Insania.Entities.Models.Geography.GeographicalObject", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId");

                    b.HasOne("Insania.Entities.Models.Geography.TypeGeographicalObject", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.BiographyHero", b =>
                {
                    b.HasOne("Insania.Entities.Models.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Chronology.Month", "MonthBegin")
                        .WithMany()
                        .HasForeignKey("MonthBeginId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Chronology.Month", "MonthEnd")
                        .WithMany()
                        .HasForeignKey("MonthEndId");

                    b.Navigation("Hero");

                    b.Navigation("MonthBegin");

                    b.Navigation("MonthEnd");
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.BiographyRequestHeroRegistration", b =>
                {
                    b.HasOne("Insania.Entities.Models.Heroes.BiographyHero", "Biography")
                        .WithMany()
                        .HasForeignKey("BiographyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Heroes.RequestHeroRegistration", "Request")
                        .WithMany()
                        .HasForeignKey("RequestId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Biography");

                    b.Navigation("Request");
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.Hero", b =>
                {
                    b.HasOne("Insania.Entities.Models.Chronology.Month", "BirthMonth")
                        .WithMany()
                        .HasForeignKey("BirthMonthId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Appearance.EyesColor", "EyesColor")
                        .WithMany()
                        .HasForeignKey("EyesColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Appearance.HairsColor", "HairsColor")
                        .WithMany()
                        .HasForeignKey("HairsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Biology.Nation", "Nation")
                        .WithMany()
                        .HasForeignKey("NationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Players.Player", "Player")
                        .WithMany()
                        .HasForeignKey("PlayerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Appearance.TypeBody", "TypeBody")
                        .WithMany()
                        .HasForeignKey("TypeBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Appearance.TypeFace", "TypeFace")
                        .WithMany()
                        .HasForeignKey("TypeFaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("BirthMonth");

                    b.Navigation("EyesColor");

                    b.Navigation("HairsColor");

                    b.Navigation("Nation");

                    b.Navigation("Player");

                    b.Navigation("TypeBody");

                    b.Navigation("TypeFace");
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.RequestHeroRegistration", b =>
                {
                    b.HasOne("Insania.Entities.Models.Administrators.Administrator", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId");

                    b.HasOne("Insania.Entities.Models.Heroes.Hero", "Hero")
                        .WithMany()
                        .HasForeignKey("HeroId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Heroes.StatusRequestHeroRegistration", "Status")
                        .WithMany()
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Hero");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Insania.Entities.Models.Heroes.StatusRequestHeroRegistration", b =>
                {
                    b.HasOne("Insania.Entities.Models.Heroes.StatusRequestHeroRegistration", "Previous")
                        .WithMany()
                        .HasForeignKey("PreviousId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Previous");
                });

            modelBuilder.Entity("Insania.Entities.Models.Players.Player", b =>
                {
                    b.HasOne("Insania.Entities.Models.Users.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Area", b =>
                {
                    b.HasOne("Insania.Entities.Models.Politics.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Politics.Fraction", "Fraction")
                        .WithMany()
                        .HasForeignKey("FractionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Geography.GeographicalObject", "GeographicalObject")
                        .WithMany()
                        .HasForeignKey("GeographicalObjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Politics.Ownership", "Ownership")
                        .WithMany()
                        .HasForeignKey("OwnershipId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Politics.Region", "Region")
                        .WithMany()
                        .HasForeignKey("RegionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("Fraction");

                    b.Navigation("GeographicalObject");

                    b.Navigation("Ownership");

                    b.Navigation("Region");
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Country", b =>
                {
                    b.HasOne("Insania.Entities.Models.Politics.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Organization", b =>
                {
                    b.HasOne("Insania.Entities.Models.Politics.Organization", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Politics.TypeOrganization", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parent");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("Insania.Entities.Models.Politics.Ownership", b =>
                {
                    b.HasOne("Insania.Entities.Models.Politics.Organization", "Organization")
                        .WithMany()
                        .HasForeignKey("OrganizationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Insania.Entities.Models.Politics.Ownership", "Parent")
                        .WithMany()
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Organization");

                    b.Navigation("Parent");
                });
#pragma warning restore 612, 618
        }
    }
}
